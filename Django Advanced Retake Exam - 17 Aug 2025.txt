Django Advanced Retake Exam - 17 Aug 2025
Individual Project Assignment
Project Assignment for the Django Advanced Course @ SoftUni
    1. General Requirements 
Your Web application should use the following technologies, frameworks, and development techniques:
    • The application must be implemented using the Django Framework
        ? The application must have at least 10 web pages:
            ? They can be created using function-based views or class-based views.
            ? At least 5 of them must be class-based views.
        ? The application must have at least 5 independent models (models created by extending, inheritance, and one-to-one relation are considered one model).
        ? The application must have at least 5 forms.
        ? The application must have at least 5 templates.
    • Use a Database Service of your choice.
        ? Optionally, you can utilize multiple storage systems (e.g., files, other Web services, and databases like PostgreSQL/MySQL/MariaDB/Oracle, etc.)
    • Use Django Template Engine or make the Front-End using JavaScript.
    • Templates (your views must return HTML files) - A template can be reused (used multiple times) according to the project's functionality.
    • Implement a Web Page Design based on Bootstrap/Google Material Design or design your own.
    • The application must have login/register/logout functionality.
    • The application must have a public part (Part of the website, accessible by everyone - anonymous, authenticated users, and admins).
    • The application must have a private part (accessible only by authenticated users and admins).
    • The application must have a customized admin site (accessible only by admins):
        ? Add at least 5 custom options (in total) to the admin interface (e.g., filters, list display, ordering, etc.).
    • Unauthenticated users (public part) have only 'get' permissions, e.g., landing page, details, about page, and login/register 'post' permissions.
    • Authenticated users (private part) have full CRUD access to their content (owners).
    • Admin Groups (at least 2 groups of admins):
        ? One must have permissions for full CRUD functionalities (superusers).
        ? While others have permissions for limited CRUD functionalities (staff).
        ? User roles should be managed from the admin site.
        ? Role management must be secure and error-safe.
    • Implement Exception Handling and Data Validation to avoid crashes when invalid data is entered 
(both client-side and server-side)
        ? When validating data, show appropriate messages to the user
    • You must implement a new "main" functionality! It is considered two additional views with CRUD operations that extend your current project. This should be done for a logged-in user.
    2. Online Project Defense
Each student is performing an online defense of their project in front of a trainer jury. 
Students have only 20 minutes, which must be allocated as follows:
    • Demonstrate how the application works (very shortly).
    • Show the source code and explain how it works.
    • Answer the jury's questions
Please be strict with the timing! At the 10th minute, your presentation ends. The remaining time will be for the Questions & Answers session.
Open the project assets beforehand to save time.
Be well prepared to present the maximum of your work within the given time. It is highly recommended that you practice the presentation at home with a stopwatch to ensure you fit within the required time.
    3. Assessment Criteria
General Requirements - 80% 
    • Functionality - 0…25
    • Implementing views correctly (views should only do their work) – 0...7
    • Implementing models correctly - 0…1
    • Implementing forms correctly - 0…7
    • Implementing templates correctly (using the template language) – 0…7
    • Implement Responsive Web Page Design - 0…3
    • Implementing login/register functionality correctly - 0…5
    • Exception handling and/or Data validation (validation in the models and/or the forms) – 0…5
    • Security (prevent SQL injection, XSS, CSRF, parameter tampering, etc.) – 0…5
    • Code quality (well-structured code, following the MVT pattern, SOLID principles, etc.) – 0…10
    • Presentation – 0…5
Answering Questions - 20 %
Answer theoretical questions from all courses in SoftUni's Python track and potential functionality outside the scope of the project.
Bonuses - up to 15 %
    • Testing (Unit & Integration) - at least 10 tests
    • Creating asynchronous view/s
    • Extending your Django project with REST Capabilities
    • Extending the Django user
    • Deploying the project
    • Additional functionality, not explicitly described in this section, will be counted as a bonus if it has a practical use
    4. Submission Deadline
    • You must submit a link to your project before 23:59h on 13-August-2025 using a survey that will appear on
04-August-2025.
    • You can continue working on your project until the end of 13-August-2025 (23:59h).
    • A presentation schedule will be available on 14-August-2025 and will include only the projects submitted beforehand. Non-submitted projects will NOT be evaluated.
    5. Additional Requirements
    • Follow the best practices for Object-Oriented design and high-quality code for the Web application:
        ? Use data encapsulation.
        ? Use exception handling properly.
        ? Use inheritance, abstraction, and polymorphism properly.
        ? Follow the principles of strong cohesion and loose coupling.
        ? Correctly format and structure your code, name your identifiers, and make the code readable.
    • A visually appealing user interface (UI).
    • Good user experience (UX).
    • Use a source control system (e.g., GitHub, BitBucket).
        ? Submit a link to your public source code repository.
        ? There must be at least 3 (three) commits on at least 3 (three) different days.
    • You are NOT allowed to use HTML, CSS, or Django apps from Workshops (Petstagram project).
    • However, you ARE permitted to incorporate techniques showcased by the lecturer, such as extending the User model.
    • It is NOT permissible to utilize HTML and/or CSS from Django or JS modules in your project.
