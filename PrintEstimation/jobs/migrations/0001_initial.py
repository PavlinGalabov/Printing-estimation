# Generated by Django 5.2.4 on 2025-07-22 15:47

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
        ('operations', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Job',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('job_number', models.CharField(blank=True, max_length=20, unique=True)),
                ('order_type', models.CharField(choices=[('book', 'Book'), ('box', 'Box'), ('poster', 'Poster'), ('flyer', 'Flyer'), ('label', 'Label'), ('business_card', 'Business Card'), ('brochure', 'Brochure'), ('catalog', 'Catalog'), ('other', 'Other')], max_length=20)),
                ('order_name', models.CharField(max_length=200)),
                ('quantity', models.PositiveIntegerField(help_text='Number of pieces to produce', validators=[django.core.validators.MinValueValidator(1)])),
                ('parts_of_selling_size', models.PositiveIntegerField(default=1, help_text='How many printing sheets fit in one purchased sheet')),
                ('n_up', models.PositiveIntegerField(default=1, help_text='Number of items per printing sheet', validators=[django.core.validators.MinValueValidator(1)])),
                ('colors_front', models.PositiveIntegerField(default=4, help_text='Number of print colors on front', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(12)])),
                ('colors_back', models.PositiveIntegerField(default=0, help_text='Number of print colors on back', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(12)])),
                ('special_colors', models.PositiveIntegerField(default=0, help_text='Number of special/spot colors', validators=[django.core.validators.MinValueValidator(0)])),
                ('number_of_pages', models.PositiveIntegerField(blank=True, help_text='Total number of pages (for books only)', null=True)),
                ('n_up_signatures', models.PositiveIntegerField(blank=True, help_text='Number of book pages per printing sheet', null=True)),
                ('notes', models.TextField(blank=True, help_text='Client remarks, agreements, and special requirements')),
                ('variant_quantities', models.CharField(blank=True, help_text="Comma-separated additional quantities for pricing (e.g., '2000,5000')", max_length=100)),
                ('total_material_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('total_labor_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('total_outsourcing_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('total_time_minutes', models.PositiveIntegerField(blank=True, help_text='Total time in minutes', null=True)),
                ('print_run', models.PositiveIntegerField(blank=True, help_text='Number of sheets to print (quantity / n_up)', null=True)),
                ('waste_sheets', models.PositiveIntegerField(blank=True, help_text='Additional sheets for waste', null=True)),
                ('sheets_to_buy', models.PositiveIntegerField(blank=True, help_text='Total sheets to purchase', null=True)),
                ('paper_weight_kg', models.DecimalField(blank=True, decimal_places=3, help_text='Total weight of paper in kg', max_digits=10, null=True)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('calculated', 'Calculated'), ('sent', 'Sent to Client'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('archived', 'Archived')], default='draft', max_length=20)),
                ('is_template', models.BooleanField(default=False, help_text='Use this job as a template')),
                ('template_name', models.CharField(blank=True, help_text='Name for template (if is_template=True)', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('calculated_at', models.DateTimeField(blank=True, null=True)),
                ('client', models.ForeignKey(help_text='Client for this job', on_delete=django.db.models.deletion.PROTECT, related_name='jobs', to='accounts.client')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('end_size', models.ForeignKey(help_text='Final product size', on_delete=django.db.models.deletion.PROTECT, related_name='jobs_end_size', to='operations.papersize')),
                ('paper_type', models.ForeignKey(help_text='Type and weight of paper', on_delete=django.db.models.deletion.PROTECT, to='operations.papertype')),
                ('printing_size', models.ForeignKey(help_text='Size used for printing', on_delete=django.db.models.deletion.PROTECT, related_name='jobs_printing_size', to='operations.papersize')),
                ('selling_size', models.ForeignKey(help_text='Size paper is purchased in', on_delete=django.db.models.deletion.PROTECT, related_name='jobs_selling_size', to='operations.papersize')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='JobOperation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sequence_order', models.PositiveIntegerField(help_text='Order of execution in the job')),
                ('operation_name', models.CharField(max_length=150)),
                ('makeready_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('price_per_sheet', models.DecimalField(decimal_places=4, max_digits=10)),
                ('plate_price', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('makeready_time_minutes', models.PositiveIntegerField()),
                ('cleaning_time_minutes', models.PositiveIntegerField(default=0)),
                ('sheets_per_minute', models.PositiveIntegerField(default=1)),
                ('quantity_before', models.PositiveIntegerField(help_text='Quantity entering this operation')),
                ('quantity_after', models.PositiveIntegerField(help_text='Quantity after this operation')),
                ('waste_sheets', models.PositiveIntegerField(default=0, help_text='Waste sheets generated by this operation')),
                ('processing_quantity', models.PositiveIntegerField(help_text='Quantity processed (including waste)')),
                ('total_cost', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('total_time_minutes', models.PositiveIntegerField()),
                ('colors_used', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='job_operations', to='jobs.job')),
                ('operation', models.ForeignKey(help_text='Reference to master operation', on_delete=django.db.models.deletion.CASCADE, to='operations.operation')),
            ],
            options={
                'ordering': ['sequence_order'],
            },
        ),
        migrations.CreateModel(
            name='JobVariant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(help_text='Quantity for this variant', validators=[django.core.validators.MinValueValidator(1)])),
                ('total_cost', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(0)])),
                ('total_time_minutes', models.PositiveIntegerField()),
                ('print_run', models.PositiveIntegerField()),
                ('waste_sheets', models.PositiveIntegerField()),
                ('sheets_to_buy', models.PositiveIntegerField()),
                ('paper_weight_kg', models.DecimalField(decimal_places=3, max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='variants', to='jobs.job')),
            ],
            options={
                'ordering': ['quantity'],
            },
        ),
        migrations.AddIndex(
            model_name='job',
            index=models.Index(fields=['status', 'is_template'], name='jobs_job_status_d3cd68_idx'),
        ),
        migrations.AddIndex(
            model_name='job',
            index=models.Index(fields=['created_by', 'created_at'], name='jobs_job_created_197740_idx'),
        ),
        migrations.AddIndex(
            model_name='job',
            index=models.Index(fields=['order_type'], name='jobs_job_order_t_eb7207_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='joboperation',
            unique_together={('job', 'sequence_order')},
        ),
        migrations.AlterUniqueTogether(
            name='jobvariant',
            unique_together={('job', 'quantity')},
        ),
    ]
