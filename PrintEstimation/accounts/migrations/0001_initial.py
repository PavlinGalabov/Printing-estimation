# Generated by Django 5.2.4 on 2025-07-22 15:47

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('superuser', 'Superuser'), ('staff', 'Staff'), ('client', 'Client')], default='client', help_text='User role in the system', max_length=20)),
                ('phone', models.CharField(blank=True, help_text='Contact phone number', max_length=20)),
                ('notes', models.TextField(blank=True, help_text='Internal notes about this user')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ['last_name', 'first_name', 'username'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_name', models.CharField(max_length=200)),
                ('contact_person', models.CharField(blank=True, max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('mobile', models.CharField(blank=True, max_length=20)),
                ('website', models.URLField(blank=True)),
                ('address_line_1', models.CharField(blank=True, max_length=200)),
                ('address_line_2', models.CharField(blank=True, max_length=200)),
                ('city', models.CharField(blank=True, max_length=100)),
                ('state_province', models.CharField(blank=True, max_length=100)),
                ('postal_code', models.CharField(blank=True, max_length=20)),
                ('country', models.CharField(default='Bulgaria', max_length=100)),
                ('tax_number', models.CharField(blank=True, help_text='VAT/Tax ID', max_length=50)),
                ('payment_terms', models.CharField(choices=[('immediate', 'Immediate'), ('net_7', 'Net 7 days'), ('net_15', 'Net 15 days'), ('net_30', 'Net 30 days'), ('net_60', 'Net 60 days'), ('custom', 'Custom')], default='net_30', max_length=20)),
                ('credit_limit', models.DecimalField(blank=True, decimal_places=2, help_text='Maximum credit allowed', max_digits=10, null=True)),
                ('discount_percentage', models.DecimalField(decimal_places=2, default=0, help_text='Default discount percentage for this client', max_digits=5)),
                ('notes', models.TextField(blank=True, help_text='Internal notes about this client')),
                ('special_requirements', models.TextField(blank=True, help_text='Special printing requirements or preferences')),
                ('is_active', models.BooleanField(default=True)),
                ('is_vip', models.BooleanField(default=False, help_text='VIP client with special treatment')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(blank=True, help_text='Associated user account for client portal access', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['company_name'],
                'indexes': [models.Index(fields=['company_name'], name='accounts_cl_company_c51645_idx'), models.Index(fields=['email'], name='accounts_cl_email_7c0d10_idx'), models.Index(fields=['is_active'], name='accounts_cl_is_acti_387986_idx')],
            },
        ),
    ]
